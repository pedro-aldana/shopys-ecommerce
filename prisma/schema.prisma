// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  username       String?      @unique
  email          String?      @unique
  hashedPassword String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  shirts         Shirt[]      @relation("UserShirts")
  cups           Cup[]        @relation("UserCups")
  accessories    Accessory[]  @relation("UserAccessories")
  orders         Order[]      @relation("UserOrders")
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  image       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  shirts      Shirt[]
  cups        Cup[]
  accessories Accessory[]
}

model Shirt {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productName String
  description String?
  image       String?
  isFeatured  Boolean
  price       Float
  size        String?
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], name: "UserShirts", onDelete: Cascade)
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Cup {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productName String
  description String?
  image       String?
  isFeatured  Boolean
  price       Float
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], name: "UserCups", onDelete: Cascade)
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Accessory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productName String
  description String?
  image       String?
  isFeatured  Boolean
  price       Float
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], name: "UserAccessories", onDelete: Cascade)
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  userId        String?      @db.ObjectId
  user          User?        @relation(fields: [userId], references: [id], name: "UserOrders", onDelete: Cascade)
  items         OrderItem[]
  totalAmount   Float
  status        String       @default("pending")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Nuevos campos
  firstName     String
  lastName      String
  address       String
  city          String
  department    String
  phone         String
}

model OrderItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  productType String   // Could be 'Shirt', 'Cup', or 'Accessory'
  quantity    Int
  price       Float
  orderId     String   @db.ObjectId
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

